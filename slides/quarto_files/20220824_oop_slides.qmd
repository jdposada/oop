---
title: "Inheritance and Polymorphism"
subtitle: "Object Oriented Programming "
author: "Jose D. Posada, PhD"
format:
  revealjs:
    #theme: reveal_theme.scss 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/logo_uninorte.png
    css: styles.css
    footer: Systems Engineering Program, Universidad del Norte, IST 2110, 202230
jupyter: python3
---

## Basic Inheritance

-   In Python every class we create uses inheritance
-   All Python classes inherit from a built-in class named `object`

```{python}
#| echo: true
#| code-line-numbers: false
class SimpleClass(object):
  pass
```

## Extending Built-ins

We can extend python built-ins to add functionally. In this example we want to extend the `list` to add a search functionality

```{python}
#| echo: true
#| code-line-numbers: false
from __future__ import annotations
class ContactList(list["Contact"]):
    def search(self, name: str) -> list["Contact"]:
        """All Contacts with name that contains the name parameter's value."""
        matching_contacts: list["Contact"] = []
        for contact in self:
            if name in contact.name:
                matching_contacts.append(contact)
        return matching_contacts
```

## Extending Built-ins

Now let's use this class inside another to save elements from a contact list

```{python}
#| echo: true
#| code-line-numbers: false
class Contact:
    all_contacts = ContactList()
    def __init__(self, name: str, email: str) -> None:
        self.name = name
        self.email = email
        Contact.all_contacts.append(self)
```

## Extending Built-ins

Let's test the functionality

```{python}
#| echo: true
#| code-line-numbers: false
c1 = Contact("John A", "johna@example.net")
c2 = Contact("John B", "johnb@sloop.net")
c3 = Contact("Jenna C", "cutty@sark.io")
[print(c.name) for c in Contact.all_contacts.search('John')]
```

## Overriding and Super

-   `super()`: allows access to the parent class methods and attributes inside a child class
-   Overrides: To override a method simply rewrite the method
    -   The method `__repr__()` is the one that is called when using the function `print()`. Let's see an example of overriding that method.

## Method Override

Let's see first what happens with the default implementation

```{python}
#| echo: true
#| code-line-numbers: false

c1 = Contact("John A", "johna@example.net")
print(c1)
```

## Method Override

Now Let's see what happens with the new one

```{python}
#| echo: true
#| code-line-numbers: false
class Contact:
    all_contacts = ContactList()

    def __init__(self, name: str, email: str) -> None:
        self.name = name
        self.email = email
        Contact.all_contacts.append(self)

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}(" f"{self.name!r}, {self.email!r}" f")"
      
c1 = Contact("John A", "johna@example.net")
print(c1)
```

## Polymorphism

When having a method with the same name, different behaviors can happen depending on which subclass is being called

::: {style="font-size: 0.8em;"}
```{python}
#| echo: true
#| code-overflow: scroll
#| code-line-numbers: false

from pathlib import Path
class AudioFile:
    ext: str
    def __init__(self, filepath: Path) -> None:
        if not filepath.suffix == self.ext:
            raise ValueError("Invalid file format")
        self.filepath = filepath

class MP3File(AudioFile):
    ext = ".mp3"
    def play(self) -> None:
        print(f"playing {self.filepath} as mp3")

class WavFile(AudioFile):
    ext = ".wav"
    def play(self) -> None:
        print(f"playing {self.filepath} as wav")
```
:::
